<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/.mvn/wrapper/maven-wrapper.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/.mvn/wrapper/maven-wrapper.properties" />
              <option name="updatedContent" value="distributionUrl=https://repo.maven.apache.org/maven2/org/apache/maven/apache-maven/3.9.4/apache-maven-3.9.4-bin.zip&#10;wrapperUrl=https://repo.maven.apache.org/maven2/org/apache/maven/wrapper/maven-wrapper/3.2.0/maven-wrapper-3.2.0.jar" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/pom.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/pom.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0&#10;                             https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;&#10;&#10;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;&#10;    &lt;parent&gt;&#10;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&#10;        &lt;version&gt;3.2.0&lt;/version&gt;&#10;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;&#10;    &lt;/parent&gt;&#10;&#10;    &lt;groupId&gt;com.springboot&lt;/groupId&gt;&#10;    &lt;artifactId&gt;knock-backend&lt;/artifactId&gt;&#10;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;&#10;    &lt;name&gt;knock-backend&lt;/name&gt;&#10;    &lt;description&gt;knock-backend&lt;/description&gt;&#10;&#10;    &lt;properties&gt;&#10;        &lt;java.version&gt;17&lt;/java.version&gt;&#10;    &lt;/properties&gt;&#10;&#10;    &lt;dependencies&gt;&#10;        &lt;!-- Spring Boot 기본 스타터들 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- Validation --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- 설정 프로세서 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;&#10;            &lt;optional&gt;true&lt;/optional&gt;&#10;        &lt;/dependency&gt;&#10;&#10;        &lt;!-- 테스트 --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;&#10;            &lt;scope&gt;test&lt;/scope&gt;&#10;        &lt;/dependency&gt;&#10;        &#10;        &lt;!-- Swagger/OpenAPI --&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springdoc&lt;/groupId&gt;&#10;            &lt;artifactId&gt;springdoc-openapi-starter-webmvc-ui&lt;/artifactId&gt;&#10;            &lt;version&gt;2.0.2&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&#10;    &lt;build&gt;&#10;        &lt;plugins&gt;&#10;            &lt;plugin&gt;&#10;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;&#10;            &lt;/plugin&gt;&#10;        &lt;/plugins&gt;&#10;    &lt;/build&gt;&#10;&lt;/project&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/EncryptionDemo.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/EncryptionDemo.java" />
              <option name="updatedContent" value="package com.springboot.knockbackend;&#10;&#10;import javax.crypto.Cipher;&#10;import java.security.KeyFactory;&#10;import java.security.PublicKey;&#10;import java.security.spec.X509EncodedKeySpec;&#10;import java.util.Base64;&#10;import java.nio.charset.StandardCharsets;&#10;&#10;public class EncryptionDemo {&#10;    &#10;    // Python 코드와 정확히 동일한 공개키 사용&#10;    private static final String PUBLIC_KEY_PEM = &#10;        &quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjUAlyqW3yE/JOblBnzLX&quot; +&#10;        &quot;Isv5a0grSFE394c/o1Uxx2lfPM/BoIuL26TNnHBMkJF4rup41z/AIaI8eteJbKOV&quot; +&#10;        &quot;XawQPfK2YbqGvf+OzDUxRjaS+bel5eY5eDF4OxOjNWjfluV/per9G/2/ZKyAUgSF&quot; +&#10;        &quot;HE9PwWF2ILFh29qVUlQc5BfCwVq6hhrAiN173d8FyFtY1JIbSdsuRnDFa2oRTY+Y&quot; +&#10;        &quot;j8kkuuwwQny7rrnD/+t+WIP2P7vHSNQ9Au3QhbCaelHJn/Uhs2xJRUmfty+IOGEa&quot; +&#10;        &quot;qhsxRn7AcHCwWKM+a1b99NdMifQNOC7voZ6h1i+y0b9Y2OLekm2Gq44bDPhdl5u3&quot; +&#10;        &quot;3QIDAQAB&quot;;&#10;    &#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;=== RSA 암호화 테스트 ===&quot;);&#10;        &#10;        String password = &quot;2414&quot;;&#10;        &#10;        try {&#10;            // 방법 1: 헤더/푸터 없이 처리 (Python과 동일)&#10;            String encrypted1 = encryptPasswordMethod1(password);&#10;            System.out.println(&quot;방법 1 결과: &quot; + encrypted1);&#10;            &#10;            // 방법 2: 헤더/푸터 포함해서 처리&#10;            String encrypted2 = encryptPasswordMethod2(password);&#10;            System.out.println(&quot;방법 2 결과: &quot; + encrypted2);&#10;            &#10;            // 방법 3: 여러 알고리즘 시도&#10;            testDifferentAlgorithms(password);&#10;            &#10;        } catch (Exception e) {&#10;            System.out.println(&quot;암호화 실패: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    &#10;    // 방법 1: Python과 동일하게 헤더/푸터 없는 키 처리&#10;    private static String encryptPasswordMethod1(String password) throws Exception {&#10;        // Python 코드와 동일한 방식으로 공개키 처리&#10;        byte[] decodedKey = Base64.getDecoder().decode(PUBLIC_KEY_PEM);&#10;        X509EncodedKeySpec spec = new X509EncodedKeySpec(decodedKey);&#10;        PublicKey key = KeyFactory.getInstance(&quot;RSA&quot;).generatePublic(spec);&#10;        &#10;        Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);&#10;        cipher.init(Cipher.ENCRYPT_MODE, key);&#10;        byte[] encrypted = cipher.doFinal(password.getBytes(StandardCharsets.UTF_8));&#10;        &#10;        return Base64.getEncoder().encodeToString(encrypted);&#10;    }&#10;    &#10;    // 방법 2: 헤더/푸터 포함한 PEM 형식으로 처리&#10;    private static String encryptPasswordMethod2(String password) throws Exception {&#10;        String pemWithHeaders = &quot;-----BEGIN PUBLIC KEY-----\n&quot; + &#10;                               PUBLIC_KEY_PEM + &quot;\n&quot; + &#10;                               &quot;-----END PUBLIC KEY-----&quot;;&#10;        &#10;        String cleanPem = pemWithHeaders&#10;                .replace(&quot;-----BEGIN PUBLIC KEY-----&quot;, &quot;&quot;)&#10;                .replace(&quot;-----END PUBLIC KEY-----&quot;, &quot;&quot;)&#10;                .replaceAll(&quot;\\s+&quot;, &quot;&quot;);&#10;        &#10;        byte[] decodedKey = Base64.getDecoder().decode(cleanPem);&#10;        X509EncodedKeySpec spec = new X509EncodedKeySpec(decodedKey);&#10;        PublicKey key = KeyFactory.getInstance(&quot;RSA&quot;).generatePublic(spec);&#10;        &#10;        Cipher cipher = Cipher.getInstance(&quot;RSA/ECB/PKCS1Padding&quot;);&#10;        cipher.init(Cipher.ENCRYPT_MODE, key);&#10;        byte[] encrypted = cipher.doFinal(password.getBytes(StandardCharsets.UTF_8));&#10;        &#10;        return Base64.getEncoder().encodeToString(encrypted);&#10;    }&#10;    &#10;    // 방법 3: 다양한 알고리즘 시도&#10;    private static void testDifferentAlgorithms(String password) {&#10;        String[] algorithms = {&#10;            &quot;RSA/ECB/PKCS1Padding&quot;,&#10;            &quot;RSA/ECB/OAEPPadding&quot;,&#10;            &quot;RSA&quot;,&#10;            &quot;RSA/ECB/NoPadding&quot;&#10;        };&#10;        &#10;        try {&#10;            byte[] decodedKey = Base64.getDecoder().decode(PUBLIC_KEY_PEM);&#10;            X509EncodedKeySpec spec = new X509EncodedKeySpec(decodedKey);&#10;            PublicKey key = KeyFactory.getInstance(&quot;RSA&quot;).generatePublic(spec);&#10;            &#10;            for (String algorithm : algorithms) {&#10;                try {&#10;                    Cipher cipher = Cipher.getInstance(algorithm);&#10;                    cipher.init(Cipher.ENCRYPT_MODE, key);&#10;                    byte[] encrypted = cipher.doFinal(password.getBytes(StandardCharsets.UTF_8));&#10;                    String result = Base64.getEncoder().encodeToString(encrypted);&#10;                    System.out.println(algorithm + &quot; 결과: &quot; + result.substring(0, Math.min(50, result.length())) + &quot;...&quot;);&#10;                } catch (Exception e) {&#10;                    System.out.println(algorithm + &quot; 실패: &quot; + e.getMessage());&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.out.println(&quot;키 처리 실패: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/controller/RealEstateController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/controller/RealEstateController.java" />
              <option name="originalContent" value="package com.springboot.knockbackend.controller;&#10;&#10;import com.springboot.knockbackend.dto.SimpleSearchRequest;&#10;import com.springboot.knockbackend.service.RealEstateService;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/real-estate&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;)&#10;public class RealEstateController {&#10;    private final RealEstateService service;&#10;&#10;    public RealEstateController(RealEstateService service) {&#10;        this.service = service;&#10;    }&#10;&#10;    @PostMapping(&quot;/simple-search&quot;)&#10;    public ResponseEntity&lt;Map&lt;String,Object&gt;&gt; simple(@RequestBody SimpleSearchRequest req) {&#10;        try {&#10;            Map&lt;String,Object&gt; result = service.simpleSearch(&#10;                    req.getPhoneNo(),&#10;                    req.getPassword(),&#10;                    req.getAddress()&#10;            );&#10;            return ResponseEntity.ok(result);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(500).body(Map.of(&#10;                &quot;success&quot;, false,&#10;                &quot;error&quot;, &quot;간편검색 실패&quot;,&#10;                &quot;message&quot;, e.getMessage()&#10;            ));&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/lot-number-search&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; lotNumberSearch(@RequestBody Map&lt;String, String&gt; request) {&#10;        try {&#10;            Map&lt;String, Object&gt; result = service.searchByLotNumber(&#10;                    request.get(&quot;phoneNo&quot;),&#10;                    request.get(&quot;password&quot;),&#10;                    request.get(&quot;addrSido&quot;),&#10;                    request.get(&quot;addrDong&quot;),&#10;                    request.get(&quot;addrLotNumber&quot;),&#10;                    request.get(&quot;realtyType&quot;),&#10;                    request.get(&quot;buildingName&quot;),&#10;                    request.get(&quot;dong&quot;),&#10;                    request.get(&quot;ho&quot;)&#10;            );&#10;            return ResponseEntity.ok(result);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(500).body(Map.of(&#10;                &quot;success&quot;, false,&#10;                &quot;error&quot;, &quot;지번검색 실패&quot;,&#10;                &quot;message&quot;, e.getMessage()&#10;            ));&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/road-address-search&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; roadAddressSearch(@RequestBody Map&lt;String, String&gt; request) {&#10;        try {&#10;            Map&lt;String, Object&gt; result = service.searchByRoadAddress(&#10;                    request.get(&quot;phoneNo&quot;),&#10;                    request.get(&quot;password&quot;),&#10;                    request.get(&quot;addrSido&quot;),&#10;                    request.get(&quot;addrSigungu&quot;),&#10;                    request.get(&quot;addrRoadName&quot;),&#10;                    request.get(&quot;addrBuildingNumber&quot;),&#10;                    request.get(&quot;buildingName&quot;),&#10;                    request.get(&quot;dong&quot;),&#10;                    request.get(&quot;ho&quot;)&#10;            );&#10;            return ResponseEntity.ok(result);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(500).body(Map.of(&#10;                &quot;success&quot;, false,&#10;                &quot;error&quot;, &quot;도로명주소검색 실패&quot;,&#10;                &quot;message&quot;, e.getMessage()&#10;            ));&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.springboot.knockbackend.controller;&#10;&#10;import com.springboot.knockbackend.dto.SimpleSearchRequest;&#10;import com.springboot.knockbackend.service.RealEstateService;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/real-estate&quot;)&#10;@CrossOrigin(originPatterns = &quot;*&quot;, allowCredentials = &quot;true&quot;)&#10;public class RealEstateController {&#10;    private final RealEstateService service;&#10;&#10;    public RealEstateController(RealEstateService service) {&#10;        this.service = service;&#10;    }&#10;&#10;    @PostMapping(&quot;/simple-search&quot;)&#10;    public ResponseEntity&lt;Map&lt;String,Object&gt;&gt; simple(@RequestBody SimpleSearchRequest req) {&#10;        try {&#10;            Map&lt;String,Object&gt; result = service.simpleSearch(&#10;                    req.getPhoneNo(),&#10;                    req.getPassword(),&#10;                    req.getAddress()&#10;            );&#10;            return ResponseEntity.ok(result);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(500).body(Map.of(&#10;                &quot;success&quot;, false,&#10;                &quot;error&quot;, &quot;간편검색 실패&quot;,&#10;                &quot;message&quot;, e.getMessage()&#10;            ));&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/lot-number-search&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; lotNumberSearch(@RequestBody Map&lt;String, String&gt; request) {&#10;        try {&#10;            Map&lt;String, Object&gt; result = service.searchByLotNumber(&#10;                    request.get(&quot;phoneNo&quot;),&#10;                    request.get(&quot;password&quot;),&#10;                    request.get(&quot;addrSido&quot;),&#10;                    request.get(&quot;addrDong&quot;),&#10;                    request.get(&quot;addrLotNumber&quot;),&#10;                    request.get(&quot;realtyType&quot;),&#10;                    request.get(&quot;buildingName&quot;),&#10;                    request.get(&quot;dong&quot;),&#10;                    request.get(&quot;ho&quot;)&#10;            );&#10;            return ResponseEntity.ok(result);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(500).body(Map.of(&#10;                &quot;success&quot;, false,&#10;                &quot;error&quot;, &quot;지번검색 실패&quot;,&#10;                &quot;message&quot;, e.getMessage()&#10;            ));&#10;        }&#10;    }&#10;&#10;    @PostMapping(&quot;/road-address-search&quot;)&#10;    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; roadAddressSearch(@RequestBody Map&lt;String, String&gt; request) {&#10;        try {&#10;            Map&lt;String, Object&gt; result = service.searchByRoadAddress(&#10;                    request.get(&quot;phoneNo&quot;),&#10;                    request.get(&quot;password&quot;),&#10;                    request.get(&quot;addrSido&quot;),&#10;                    request.get(&quot;addrSigungu&quot;),&#10;                    request.get(&quot;addrRoadName&quot;),&#10;                    request.get(&quot;addrBuildingNumber&quot;),&#10;                    request.get(&quot;buildingName&quot;),&#10;                    request.get(&quot;dong&quot;),&#10;                    request.get(&quot;ho&quot;)&#10;            );&#10;            return ResponseEntity.ok(result);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(500).body(Map.of(&#10;                &quot;success&quot;, false,&#10;                &quot;error&quot;, &quot;도로명주소검색 실패&quot;,&#10;                &quot;message&quot;, e.getMessage()&#10;            ));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/service/RealEstateService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/service/RealEstateService.java" />
              <option name="originalContent" value="package com.springboot.knockbackend.service;&#10;&#10;import java.util.Map;&#10;&#10;public interface RealEstateService {&#10;    Map&lt;String,Object&gt; simpleSearch(String phoneNo, String password, String address);&#10;}" />
              <option name="updatedContent" value="package com.springboot.knockbackend.service;&#10;&#10;import java.util.Map;&#10;&#10;public interface RealEstateService {&#10;    Map&lt;String, Object&gt; simpleSearch(String phoneNo, String password, String address);&#10;    &#10;    // Python 코드와 동일한 검색 메서드들 추가&#10;    Map&lt;String, Object&gt; searchByLotNumber(String phoneNo, String password, &#10;            String addrSido, String addrDong, String addrLotNumber, &#10;            String realtyType, String buildingName, String dong, String ho);&#10;    &#10;    Map&lt;String, Object&gt; searchByRoadAddress(String phoneNo, String password,&#10;            String addrSido, String addrSigungu, String addrRoadName, String addrBuildingNumber,&#10;            String buildingName, String dong, String ho);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/service/impl/RealEstateServiceImpl.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/service/impl/RealEstateServiceImpl.java" />
              <option name="originalContent" value="package com.springboot.knockbackend.service.impl;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.springboot.knockbackend.exception.RealEstateApiException;&#10;import com.springboot.knockbackend.properties.CodefProperties;&#10;import com.springboot.knockbackend.service.RealEstateService;&#10;import com.springboot.knockbackend.util.RSAUtil;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.http.*;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@Service&#10;public class RealEstateServiceImpl implements RealEstateService {&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(RealEstateServiceImpl.class);&#10;&#10;    private final CodefProperties codefProperties;&#10;    private final RSAUtil rsaUtil;&#10;    private final RestTemplate restTemplate;&#10;    private final ObjectMapper objectMapper;&#10;&#10;    public RealEstateServiceImpl(CodefProperties codefProperties, RSAUtil rsaUtil) {&#10;        this.codefProperties = codefProperties;&#10;        this.rsaUtil = rsaUtil;&#10;        this.restTemplate = new RestTemplate();&#10;        this.objectMapper = new ObjectMapper();&#10;    }&#10;&#10;    @Override&#10;    public Map&lt;String, Object&gt; simpleSearch(String phoneNo, String password, String address) {&#10;        try {&#10;            String encryptedPassword = rsaUtil.encryptPassword(password, codefProperties.getPublicKeyPem());&#10;&#10;            Map&lt;String, Object&gt; requestBody = new HashMap&lt;&gt;();&#10;            requestBody.put(&quot;organization&quot;, &quot;0002&quot;);&#10;            requestBody.put(&quot;phoneNo&quot;, phoneNo);&#10;            requestBody.put(&quot;password&quot;, encryptedPassword);&#10;            requestBody.put(&quot;inquiryType&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;address&quot;, address);&#10;            requestBody.put(&quot;realtyType&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;issueType&quot;, &quot;2&quot;);&#10;            requestBody.put(&quot;jointMortgageJeonseYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;tradingYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;registerSummaryYN&quot;, &quot;1&quot;);&#10;&#10;            return callCodefApi(requestBody);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;간편검색 오류: &quot;, e);&#10;            throw new RealEstateApiException(&quot;간편검색 실패: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Map&lt;String, Object&gt; searchByLotNumber(String phoneNo, String password, String addrSido,&#10;                                                  String addrDong, String addrLotNumber, String realtyType,&#10;                                                  String buildingName, String dong, String ho) {&#10;        try {&#10;            String encryptedPassword = rsaUtil.encryptPassword(password, codefProperties.getPublicKeyPem());&#10;&#10;            Map&lt;String, Object&gt; requestBody = new HashMap&lt;&gt;();&#10;            requestBody.put(&quot;organization&quot;, &quot;0002&quot;);&#10;            requestBody.put(&quot;phoneNo&quot;, phoneNo);&#10;            requestBody.put(&quot;password&quot;, encryptedPassword);&#10;            requestBody.put(&quot;inquiryType&quot;, &quot;2&quot;);&#10;            requestBody.put(&quot;realtyType&quot;, realtyType != null ? realtyType : &quot;1&quot;);&#10;            requestBody.put(&quot;addr_sido&quot;, addrSido);&#10;            requestBody.put(&quot;addr_dong&quot;, addrDong);&#10;            requestBody.put(&quot;addr_lotNumber&quot;, addrLotNumber);&#10;            requestBody.put(&quot;buildingName&quot;, buildingName);&#10;            requestBody.put(&quot;dong&quot;, dong);&#10;            requestBody.put(&quot;ho&quot;, ho);&#10;            requestBody.put(&quot;inputSelect&quot;, &quot;0&quot;);&#10;            requestBody.put(&quot;issueType&quot;, &quot;2&quot;);&#10;            requestBody.put(&quot;jointMortgageJeonseYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;tradingYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;registerSummaryYN&quot;, &quot;1&quot;);&#10;&#10;            return callCodefApi(requestBody);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;지번검색 오류: &quot;, e);&#10;            throw new RealEstateApiException(&quot;지번검색 실패: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Map&lt;String, Object&gt; searchByRoadAddress(String phoneNo, String password, String addrSido,&#10;                                                    String addrSigungu, String addrRoadName, String addrBuildingNumber,&#10;                                                    String buildingName, String dong, String ho) {&#10;        try {&#10;            String encryptedPassword = rsaUtil.encryptPassword(password, codefProperties.getPublicKeyPem());&#10;&#10;            Map&lt;String, Object&gt; requestBody = new HashMap&lt;&gt;();&#10;            requestBody.put(&quot;organization&quot;, &quot;0002&quot;);&#10;            requestBody.put(&quot;phoneNo&quot;, phoneNo);&#10;            requestBody.put(&quot;password&quot;, encryptedPassword);&#10;            requestBody.put(&quot;inquiryType&quot;, &quot;3&quot;);&#10;            requestBody.put(&quot;realtyType&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;addr_sido&quot;, addrSido);&#10;            requestBody.put(&quot;addr_sigungu&quot;, addrSigungu);&#10;            requestBody.put(&quot;addr_roadName&quot;, addrRoadName);&#10;            requestBody.put(&quot;addr_buildingNumber&quot;, addrBuildingNumber);&#10;            requestBody.put(&quot;buildingName&quot;, buildingName);&#10;            requestBody.put(&quot;dong&quot;, dong);&#10;            requestBody.put(&quot;ho&quot;, ho);&#10;            requestBody.put(&quot;issueType&quot;, &quot;2&quot;);&#10;            requestBody.put(&quot;jointMortgageJeonseYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;tradingYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;registerSummaryYN&quot;, &quot;1&quot;);&#10;&#10;            return callCodefApi(requestBody);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;도로명주소검색 오류: &quot;, e);&#10;            throw new RealEstateApiException(&quot;도로명주소검색 실패: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private Map&lt;String, Object&gt; callCodefApi(Map&lt;String, Object&gt; requestBody) {&#10;        try {&#10;            // OAuth 토큰 획득&#10;            String accessToken = getAccessToken();&#10;&#10;            // API 호출&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.setContentType(MediaType.APPLICATION_JSON);&#10;            headers.setBearerAuth(accessToken);&#10;&#10;            HttpEntity&lt;Map&lt;String, Object&gt;&gt; entity = new HttpEntity&lt;&gt;(requestBody, headers);&#10;&#10;            logger.info(&quot;CODEF API 호출 시작 - URL: {}&quot;, codefProperties.getBaseUrl());&#10;            logger.info(&quot;요청 데이터: {}&quot;, objectMapper.writeValueAsString(requestBody));&#10;&#10;            ResponseEntity&lt;String&gt; response = restTemplate.exchange(&#10;                codefProperties.getBaseUrl(),&#10;                HttpMethod.POST,&#10;                entity,&#10;                String.class&#10;            );&#10;&#10;            logger.info(&quot;CODEF API 응답 상태: {}&quot;, response.getStatusCode());&#10;            logger.info(&quot;CODEF API 응답 헤더: {}&quot;, response.getHeaders());&#10;            logger.info(&quot;CODEF API 응답 내용: {}&quot;, response.getBody());&#10;&#10;            // 응답이 JSON인지 확인&#10;            String responseBody = response.getBody();&#10;            if (responseBody == null || responseBody.trim().isEmpty()) {&#10;                throw new RuntimeException(&quot;API 응답이 비어있습니다&quot;);&#10;            }&#10;&#10;            // HTML 응답인지 확인 (오류 페이지)&#10;            if (responseBody.trim().startsWith(&quot;&lt;!DOCTYPE&quot;) || responseBody.trim().startsWith(&quot;&lt;html&quot;)) {&#10;                throw new RuntimeException(&quot;API에서 HTML 오류 페이지를 반환했습니다: &quot; + responseBody.substring(0, Math.min(200, responseBody.length())));&#10;            }&#10;&#10;            // JSON 파싱 시도&#10;            Map&lt;String, Object&gt; apiResponse;&#10;            try {&#10;                apiResponse = objectMapper.readValue(responseBody, Map.class);&#10;            } catch (Exception e) {&#10;                throw new RuntimeException(&quot;API 응답을 JSON으로 파싱할 수 없습니다: &quot; + responseBody.substring(0, Math.min(200, responseBody.length())));&#10;            }&#10;&#10;            Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();&#10;            result.put(&quot;success&quot;, true);&#10;            result.put(&quot;data&quot;, apiResponse);&#10;            return result;&#10;&#10;        } catch (Exception e) {&#10;            logger.error(&quot;CODEF API 호출 실패: &quot;, e);&#10;            Map&lt;String, Object&gt; errorResult = new HashMap&lt;&gt;();&#10;            errorResult.put(&quot;success&quot;, false);&#10;            errorResult.put(&quot;error&quot;, &quot;API 호출 실패&quot;);&#10;            errorResult.put(&quot;message&quot;, e.getMessage());&#10;            errorResult.put(&quot;details&quot;, e.getClass().getSimpleName());&#10;            return errorResult;&#10;        }&#10;    }&#10;&#10;    private String getAccessToken() {&#10;        try {&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);&#10;            headers.setBasicAuth(codefProperties.getClientId(), codefProperties.getClientSecret());&#10;&#10;            String body = &quot;grant_type=client_credentials&amp;scope=read&quot;;&#10;            HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(body, headers);&#10;&#10;            logger.info(&quot;OAuth 토큰 요청 시작&quot;);&#10;&#10;            ResponseEntity&lt;Map&gt; response = restTemplate.exchange(&#10;                codefProperties.getOauthUrl(),&#10;                HttpMethod.POST,&#10;                entity,&#10;                Map.class&#10;            );&#10;&#10;            Map&lt;String, Object&gt; responseBody = response.getBody();&#10;            String accessToken = (String) responseBody.get(&quot;access_token&quot;);&#10;&#10;            logger.info(&quot;OAuth 토큰 획득 성공&quot;);&#10;            return accessToken;&#10;&#10;        } catch (Exception e) {&#10;            logger.error(&quot;OAuth 토큰 획득 실패: &quot;, e);&#10;            throw new RealEstateApiException(&quot;OAuth 토큰 획득 실패: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.springboot.knockbackend.service.impl;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import com.springboot.knockbackend.exception.RealEstateApiException;&#10;import com.springboot.knockbackend.properties.CodefProperties;&#10;import com.springboot.knockbackend.service.RealEstateService;&#10;import com.springboot.knockbackend.util.RSAUtil;&#10;import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.http.*;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.client.RestTemplate;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@Service&#10;public class RealEstateServiceImpl implements RealEstateService {&#10;&#10;    private static final Logger logger = LoggerFactory.getLogger(RealEstateServiceImpl.class);&#10;&#10;    private final CodefProperties codefProperties;&#10;    private final RSAUtil rsaUtil;&#10;    private final RestTemplate restTemplate;&#10;    private final ObjectMapper objectMapper;&#10;&#10;    public RealEstateServiceImpl(CodefProperties codefProperties, RSAUtil rsaUtil) {&#10;        this.codefProperties = codefProperties;&#10;        this.rsaUtil = rsaUtil;&#10;        this.restTemplate = new RestTemplate();&#10;        this.objectMapper = new ObjectMapper();&#10;    }&#10;&#10;    @Override&#10;    public Map&lt;String, Object&gt; simpleSearch(String phoneNo, String password, String address) {&#10;        try {&#10;            String encryptedPassword = rsaUtil.encryptPassword(password, codefProperties.getPublicKeyPem());&#10;&#10;            Map&lt;String, Object&gt; requestBody = new HashMap&lt;&gt;();&#10;            requestBody.put(&quot;organization&quot;, &quot;0002&quot;);&#10;            requestBody.put(&quot;phoneNo&quot;, phoneNo);&#10;            requestBody.put(&quot;password&quot;, encryptedPassword);&#10;            requestBody.put(&quot;inquiryType&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;address&quot;, address);&#10;            requestBody.put(&quot;realtyType&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;issueType&quot;, &quot;2&quot;);&#10;            requestBody.put(&quot;jointMortgageJeonseYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;tradingYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;registerSummaryYN&quot;, &quot;1&quot;);&#10;&#10;            return callCodefApi(requestBody);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;간편검색 오류: &quot;, e);&#10;            throw new RealEstateApiException(&quot;간편검색 실패: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Map&lt;String, Object&gt; searchByLotNumber(String phoneNo, String password, String addrSido,&#10;                                                  String addrDong, String addrLotNumber, String realtyType,&#10;                                                  String buildingName, String dong, String ho) {&#10;        try {&#10;            String encryptedPassword = rsaUtil.encryptPassword(password, codefProperties.getPublicKeyPem());&#10;&#10;            Map&lt;String, Object&gt; requestBody = new HashMap&lt;&gt;();&#10;            requestBody.put(&quot;organization&quot;, &quot;0002&quot;);&#10;            requestBody.put(&quot;phoneNo&quot;, phoneNo);&#10;            requestBody.put(&quot;password&quot;, encryptedPassword);&#10;            requestBody.put(&quot;inquiryType&quot;, &quot;2&quot;);&#10;            requestBody.put(&quot;realtyType&quot;, realtyType != null ? realtyType : &quot;1&quot;);&#10;            requestBody.put(&quot;addr_sido&quot;, addrSido);&#10;            requestBody.put(&quot;addr_dong&quot;, addrDong);&#10;            requestBody.put(&quot;addr_lotNumber&quot;, addrLotNumber);&#10;            requestBody.put(&quot;buildingName&quot;, buildingName);&#10;            requestBody.put(&quot;dong&quot;, dong);&#10;            requestBody.put(&quot;ho&quot;, ho);&#10;            requestBody.put(&quot;inputSelect&quot;, &quot;0&quot;);&#10;            requestBody.put(&quot;issueType&quot;, &quot;2&quot;);&#10;            requestBody.put(&quot;jointMortgageJeonseYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;tradingYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;registerSummaryYN&quot;, &quot;1&quot;);&#10;&#10;            return callCodefApi(requestBody);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;지번검색 오류: &quot;, e);&#10;            throw new RealEstateApiException(&quot;지번검색 실패: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public Map&lt;String, Object&gt; searchByRoadAddress(String phoneNo, String password, String addrSido,&#10;                                                    String addrSigungu, String addrRoadName, String addrBuildingNumber,&#10;                                                    String buildingName, String dong, String ho) {&#10;        try {&#10;            String encryptedPassword = rsaUtil.encryptPassword(password, codefProperties.getPublicKeyPem());&#10;&#10;            Map&lt;String, Object&gt; requestBody = new HashMap&lt;&gt;();&#10;            requestBody.put(&quot;organization&quot;, &quot;0002&quot;);&#10;            requestBody.put(&quot;phoneNo&quot;, phoneNo);&#10;            requestBody.put(&quot;password&quot;, encryptedPassword);&#10;            requestBody.put(&quot;inquiryType&quot;, &quot;3&quot;);&#10;            requestBody.put(&quot;realtyType&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;addr_sido&quot;, addrSido);&#10;            requestBody.put(&quot;addr_sigungu&quot;, addrSigungu);&#10;            requestBody.put(&quot;addr_roadName&quot;, addrRoadName);&#10;            requestBody.put(&quot;addr_buildingNumber&quot;, addrBuildingNumber);&#10;            requestBody.put(&quot;buildingName&quot;, buildingName);&#10;            requestBody.put(&quot;dong&quot;, dong);&#10;            requestBody.put(&quot;ho&quot;, ho);&#10;            requestBody.put(&quot;issueType&quot;, &quot;2&quot;);&#10;            requestBody.put(&quot;jointMortgageJeonseYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;tradingYN&quot;, &quot;1&quot;);&#10;            requestBody.put(&quot;registerSummaryYN&quot;, &quot;1&quot;);&#10;&#10;            return callCodefApi(requestBody);&#10;        } catch (Exception e) {&#10;            logger.error(&quot;도로명주소검색 오류: &quot;, e);&#10;            throw new RealEstateApiException(&quot;도로명주소검색 실패: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private Map&lt;String, Object&gt; callCodefApi(Map&lt;String, Object&gt; requestBody) {&#10;        try {&#10;            // OAuth 토큰 획득&#10;            String accessToken = getAccessToken();&#10;            &#10;            // API 호출&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.setContentType(MediaType.APPLICATION_JSON);&#10;            headers.setBearerAuth(accessToken);&#10;            &#10;            HttpEntity&lt;Map&lt;String, Object&gt;&gt; entity = new HttpEntity&lt;&gt;(requestBody, headers);&#10;            &#10;            logger.info(&quot;CODEF API 호출 시작 - URL: {}&quot;, codefProperties.getBaseUrl());&#10;            logger.info(&quot;요청 데이터: {}&quot;, objectMapper.writeValueAsString(requestBody));&#10;            &#10;            ResponseEntity&lt;String&gt; response = restTemplate.exchange(&#10;                codefProperties.getBaseUrl(),&#10;                HttpMethod.POST,&#10;                entity,&#10;                String.class&#10;            );&#10;            &#10;            logger.info(&quot;CODEF API 응답 상태: {}&quot;, response.getStatusCode());&#10;            logger.info(&quot;CODEF API 응답 헤더: {}&quot;, response.getHeaders());&#10;            logger.info(&quot;CODEF API 원시 응답: {}&quot;, response.getBody());&#10;            &#10;            // 응답이 JSON인지 확인&#10;            String responseBody = response.getBody();&#10;            if (responseBody == null || responseBody.trim().isEmpty()) {&#10;                throw new RuntimeException(&quot;API 응답이 비어있습니다&quot;);&#10;            }&#10;            &#10;            // URL 디코딩 처리&#10;            String decodedResponse = responseBody;&#10;            try {&#10;                if (responseBody.contains(&quot;%&quot;)) {&#10;                    decodedResponse = java.net.URLDecoder.decode(responseBody, &quot;UTF-8&quot;);&#10;                    logger.info(&quot;URL 디코딩된 응답: {}&quot;, decodedResponse);&#10;                }&#10;            } catch (Exception e) {&#10;                logger.warn(&quot;URL 디코딩 실패, 원본 응답 사용: {}&quot;, e.getMessage());&#10;            }&#10;            &#10;            // HTML 응답인지 확인 (오류 페이지)&#10;            if (decodedResponse.trim().startsWith(&quot;&lt;!DOCTYPE&quot;) || decodedResponse.trim().startsWith(&quot;&lt;html&quot;)) {&#10;                throw new RuntimeException(&quot;API에서 HTML 오류 페이지를 반환했습니다: &quot; + decodedResponse.substring(0, Math.min(200, decodedResponse.length())));&#10;            }&#10;            &#10;            // JSON 파싱 시도&#10;            Map&lt;String, Object&gt; apiResponse;&#10;            try {&#10;                apiResponse = objectMapper.readValue(decodedResponse, Map.class);&#10;                logger.info(&quot;파싱된 API 응답: {}&quot;, apiResponse);&#10;            } catch (Exception e) {&#10;                logger.error(&quot;JSON 파싱 실패. 원본: {}&quot;, responseBody);&#10;                logger.error(&quot;디코딩된 응답: {}&quot;, decodedResponse);&#10;                throw new RuntimeException(&quot;API 응답을 JSON으로 파싱할 수 없습니다: &quot; + decodedResponse.substring(0, Math.min(200, decodedResponse.length())));&#10;            }&#10;            &#10;            Map&lt;String, Object&gt; result = new HashMap&lt;&gt;();&#10;            result.put(&quot;success&quot;, true);&#10;            result.put(&quot;data&quot;, apiResponse);&#10;            return result;&#10;            &#10;        } catch (Exception e) {&#10;            logger.error(&quot;CODEF API 호출 실패: &quot;, e);&#10;            Map&lt;String, Object&gt; errorResult = new HashMap&lt;&gt;();&#10;            errorResult.put(&quot;success&quot;, false);&#10;            errorResult.put(&quot;error&quot;, &quot;API 호출 실패&quot;);&#10;            errorResult.put(&quot;message&quot;, e.getMessage());&#10;            errorResult.put(&quot;details&quot;, e.getClass().getSimpleName());&#10;            return errorResult;&#10;        }&#10;    }&#10;&#10;    private String getAccessToken() {&#10;        try {&#10;            HttpHeaders headers = new HttpHeaders();&#10;            headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);&#10;            headers.setBasicAuth(codefProperties.getClientId(), codefProperties.getClientSecret());&#10;&#10;            String body = &quot;grant_type=client_credentials&amp;scope=read&quot;;&#10;            HttpEntity&lt;String&gt; entity = new HttpEntity&lt;&gt;(body, headers);&#10;&#10;            logger.info(&quot;OAuth 토큰 요청 시작&quot;);&#10;&#10;            ResponseEntity&lt;Map&gt; response = restTemplate.exchange(&#10;                codefProperties.getOauthUrl(),&#10;                HttpMethod.POST,&#10;                entity,&#10;                Map.class&#10;            );&#10;&#10;            Map&lt;String, Object&gt; responseBody = response.getBody();&#10;            String accessToken = (String) responseBody.get(&quot;access_token&quot;);&#10;&#10;            logger.info(&quot;OAuth 토큰 획득 성공&quot;);&#10;            return accessToken;&#10;&#10;        } catch (Exception e) {&#10;            logger.error(&quot;OAuth 토큰 획득 실패: &quot;, e);&#10;            throw new RealEstateApiException(&quot;OAuth 토큰 획득 실패: &quot; + e.getMessage());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/util/RSAUtil.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/springboot/knockbackend/util/RSAUtil.java" />
              <option name="updatedContent" value="package com.springboot.knockbackend.util;&#10;&#10;import org.springframework.stereotype.Component;&#10;&#10;import javax.crypto.Cipher;&#10;import java.security.KeyFactory;&#10;import java.security.PublicKey;&#10;import java.security.spec.X509EncodedKeySpec;&#10;import java.util.Base64;&#10;&#10;@Component&#10;public class RSAUtil {&#10;    &#10;    private static final String RSA_ALGORITHM = &quot;RSA&quot;;&#10;    private static final String RSA_TRANSFORMATION = &quot;RSA/ECB/PKCS1Padding&quot;;&#10;    &#10;    public String encryptPassword(String password, String publicKeyPem) {&#10;        try {&#10;            // PEM 형식의 공개키를 PublicKey 객체로 변환&#10;            String publicKeyContent = publicKeyPem&#10;                .replace(&quot;-----BEGIN PUBLIC KEY-----&quot;, &quot;&quot;)&#10;                .replace(&quot;-----END PUBLIC KEY-----&quot;, &quot;&quot;)&#10;                .replaceAll(&quot;\\s&quot;, &quot;&quot;);&#10;            &#10;            byte[] keyBytes = Base64.getDecoder().decode(publicKeyContent);&#10;            X509EncodedKeySpec spec = new X509EncodedKeySpec(keyBytes);&#10;            KeyFactory keyFactory = KeyFactory.getInstance(RSA_ALGORITHM);&#10;            PublicKey publicKey = keyFactory.generatePublic(spec);&#10;            &#10;            // RSA 암호화&#10;            Cipher cipher = Cipher.getInstance(RSA_TRANSFORMATION);&#10;            cipher.init(Cipher.ENCRYPT_MODE, publicKey);&#10;            byte[] encryptedBytes = cipher.doFinal(password.getBytes(&quot;UTF-8&quot;));&#10;            &#10;            return Base64.getEncoder().encodeToString(encryptedBytes);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;RSA 암호화 실패: &quot; + e.getMessage(), e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=knock-backend&#10;&#10;# 데이터베이스 연결 설정 비활성화 (API 테스트용)&#10;spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration&#10;&#10;# Python에서 사용한 CODEF 설정&#10;codef.real-estate.client-id=2b0f6cec-9f86-45dc-a433-ae942c6f7cce&#10;codef.real-estate.client-secret=01f58b65-d9d5-4445-b017-1d07e142dcc0&#10;&#10;codef.real-estate.public-key-pem=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjUAlyqW3yE/JOblBnzLXIsv5a0grSFE394c/o1Uxx2lfPM/BoIuL26TNnHBMkJF4rup41z/AIaI8eteJbKOVXawQPfK2YbqGvf+OzDUxRjaS+bel5eY5eDF4OxOjNWjfluV/per9G/2/ZKyAUgSFHE9PwWF2ILFh29qVUlQc5BfCwVq6hhrAiN173d8FyFtY1JIbSdsuRnDFa2oRTY+Yj8kkuuwwQny7rrnD/+t+WIP2P7vHSNQ9Au3QhbCaelHJn/Uhs2xJRUmfty+IOGEaqhsxRn7AcHCwWKM+a1b99NdMifQNOC7voZ6h1i+y0b9Y2OLekm2Gq44bDPhdl5u33QIDAQAB&#10;&#10;codef.real-estate.base-url=https://development.codef.io/v1/kr/public/ck/real-estate-register/status&#10;codef.real-estate.oauth-url=https://oauth.codef.io/oauth/token&#10;&#10;codef.real-estate.timeout=300000&#10;" />
              <option name="updatedContent" value="spring.application.name=knock-backend&#10;&#10;# 서버 포트를 8081로 변경&#10;server.port=8081&#10;&#10;# 데이터베이스 연결 설정 비활성화 (API 테스트용)&#10;spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration&#10;&#10;# Python에서 사용한 CODEF 설정&#10;codef.real-estate.client-id=2b0f6cec-9f86-45dc-a433-ae942c6f7cce&#10;codef.real-estate.client-secret=01f58b65-d9d5-4445-b017-1d07e142dcc0&#10;&#10;codef.real-estate.public-key-pem=MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjUAlyqW3yE/JOblBnzLXIsv5a0grSFE394c/o1Uxx2lfPM/BoIuL26TNnHBMkJF4rup41z/AIaI8eteJbKOVXawQPfK2YbqGvf+OzDUxRjaS+bel5eY5eDF4OxOjNWjfluV/per9G/2/ZKyAUgSFHE9PwWF2ILFh29qVUlQc5BfCwVq6hhrAiN173d8FyFtY1JIbSdsuRnDFa2oRTY+Yj8kkuuwwQny7rrnD/+t+WIP2P7vHSNQ9Au3QhbCaelHJn/Uhs2xJRUmfty+IOGEaqhsxRn7AcHCwWKM+a1b99NdMifQNOC7voZ6h1i+y0b9Y2OLekm2Gq44bDPhdl5u33QIDAQAB&#10;&#10;codef.real-estate.base-url=https://development.codef.io/v1/kr/public/ck/real-estate-register/status&#10;codef.real-estate.oauth-url=https://oauth.codef.io/oauth/token&#10;&#10;codef.real-estate.timeout=300000" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/static/api-test.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/static/api-test.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;ko&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;부동산 등기부등본 조회 API 테스트&lt;/title&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            font-family: Arial, sans-serif;&#10;            max-width: 800px;&#10;            margin: 0 auto;&#10;            padding: 20px;&#10;            background-color: #f5f5f5;&#10;        }&#10;        .container {&#10;            background: white;&#10;            padding: 30px;&#10;            border-radius: 10px;&#10;            box-shadow: 0 2px 10px rgba(0,0,0,0.1);&#10;        }&#10;        .form-group {&#10;            margin-bottom: 15px;&#10;        }&#10;        label {&#10;            display: block;&#10;            margin-bottom: 5px;&#10;            font-weight: bold;&#10;            color: #333;&#10;        }&#10;        input, select, textarea {&#10;            width: 100%;&#10;            padding: 10px;&#10;            border: 1px solid #ddd;&#10;            border-radius: 5px;&#10;            font-size: 14px;&#10;        }&#10;        button {&#10;            background-color: #007bff;&#10;            color: white;&#10;            padding: 12px 24px;&#10;            border: none;&#10;            border-radius: 5px;&#10;            cursor: pointer;&#10;            font-size: 16px;&#10;            margin-right: 10px;&#10;        }&#10;        button:hover {&#10;            background-color: #0056b3;&#10;        }&#10;        .result {&#10;            margin-top: 20px;&#10;            padding: 15px;&#10;            background-color: #f8f9fa;&#10;            border-radius: 5px;&#10;            border: 1px solid #dee2e6;&#10;        }&#10;        .error {&#10;            background-color: #f8d7da;&#10;            border-color: #f5c6cb;&#10;            color: #721c24;&#10;        }&#10;        .success {&#10;            background-color: #d4edda;&#10;            border-color: #c3e6cb;&#10;            color: #155724;&#10;        }&#10;        .tab {&#10;            display: inline-block;&#10;            padding: 10px 20px;&#10;            margin-right: 5px;&#10;            background-color: #e9ecef;&#10;            border: 1px solid #dee2e6;&#10;            border-bottom: none;&#10;            cursor: pointer;&#10;            border-radius: 5px 5px 0 0;&#10;        }&#10;        .tab.active {&#10;            background-color: white;&#10;            border-bottom: 1px solid white;&#10;            margin-bottom: -1px;&#10;        }&#10;        .tab-content {&#10;            display: none;&#10;            border: 1px solid #dee2e6;&#10;            padding: 20px;&#10;            border-radius: 0 5px 5px 5px;&#10;        }&#10;        .tab-content.active {&#10;            display: block;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;h1&gt; 부동산 등기부등본 조회 API 테스트&lt;/h1&gt;&#10;&#10;        &lt;!-- 탭 메뉴 --&gt;&#10;        &lt;div class=&quot;tabs&quot;&gt;&#10;            &lt;div class=&quot;tab active&quot; onclick=&quot;showTab('simple')&quot;&gt;간편검색&lt;/div&gt;&#10;            &lt;div class=&quot;tab&quot; onclick=&quot;showTab('lot')&quot;&gt;지번검색&lt;/div&gt;&#10;            &lt;div class=&quot;tab&quot; onclick=&quot;showTab('road')&quot;&gt;도로명주소검색&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- 간편검색 탭 --&gt;&#10;        &lt;div id=&quot;simple-tab&quot; class=&quot;tab-content active&quot;&gt;&#10;            &lt;h3&gt;간편검색&lt;/h3&gt;&#10;            &lt;form id=&quot;simpleForm&quot;&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;simplePhoneNo&quot;&gt;휴대폰 번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;simplePhoneNo&quot; value=&quot;01083662414&quot; placeholder=&quot;예: 01012345678&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;simplePassword&quot;&gt;비밀번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;password&quot; id=&quot;simplePassword&quot; value=&quot;0000&quot; placeholder=&quot;4자리 숫자&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;simpleAddress&quot;&gt;주소:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;simpleAddress&quot; value=&quot;경기도 용인시&quot; placeholder=&quot;예: 서울특별시 강남구&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;button type=&quot;button&quot; onclick=&quot;testSimpleSearch()&quot;&gt;간편검색 실행&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- 지번검색 탭 --&gt;&#10;        &lt;div id=&quot;lot-tab&quot; class=&quot;tab-content&quot;&gt;&#10;            &lt;h3&gt;지번검색&lt;/h3&gt;&#10;            &lt;form id=&quot;lotForm&quot;&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotPhoneNo&quot;&gt;휴대폰 번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotPhoneNo&quot; value=&quot;01083662414&quot; placeholder=&quot;예: 01012345678&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotPassword&quot;&gt;비밀번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;password&quot; id=&quot;lotPassword&quot; value=&quot;0000&quot; placeholder=&quot;4자리 숫자&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotAddrSido&quot;&gt;시/도:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotAddrSido&quot; value=&quot;경기도&quot; placeholder=&quot;예: 경기도&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotAddrDong&quot;&gt;읍면동:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotAddrDong&quot; value=&quot;지행동&quot; placeholder=&quot;예: 지행동&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotAddrLotNumber&quot;&gt;지번:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotAddrLotNumber&quot; value=&quot;691-3&quot; placeholder=&quot;예: 123-45&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotRealtyType&quot;&gt;부동산구분:&lt;/label&gt;&#10;                    &lt;select id=&quot;lotRealtyType&quot;&gt;&#10;                        &lt;option value=&quot;0&quot;&gt;토지+건물&lt;/option&gt;&#10;                        &lt;option value=&quot;1&quot; selected&gt;집합건물&lt;/option&gt;&#10;                        &lt;option value=&quot;2&quot;&gt;토지&lt;/option&gt;&#10;                        &lt;option value=&quot;3&quot;&gt;건물&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotBuildingName&quot;&gt;건물명 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotBuildingName&quot; value=&quot;현진에버빌&quot; placeholder=&quot;예: 현진에버빌&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotDong&quot;&gt;동 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotDong&quot; value=&quot;104&quot; placeholder=&quot;예: 101&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotHo&quot;&gt;호 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotHo&quot; value=&quot;901&quot; placeholder=&quot;예: 1001&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;button type=&quot;button&quot; onclick=&quot;testLotNumberSearch()&quot;&gt;지번검색 실행&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- 도로명주소검색 탭 --&gt;&#10;        &lt;div id=&quot;road-tab&quot; class=&quot;tab-content&quot;&gt;&#10;            &lt;h3&gt;도로명주소검색&lt;/h3&gt;&#10;            &lt;form id=&quot;roadForm&quot;&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadPhoneNo&quot;&gt;휴대폰 번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadPhoneNo&quot; value=&quot;01083662414&quot; placeholder=&quot;예: 01012345678&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadPassword&quot;&gt;비밀번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;password&quot; id=&quot;roadPassword&quot; value=&quot;0000&quot; placeholder=&quot;4자리 숫자&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadAddrSido&quot;&gt;시/도:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadAddrSido&quot; value=&quot;경기도&quot; placeholder=&quot;예: 경기도&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadAddrSigungu&quot;&gt;시군구:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadAddrSigungu&quot; value=&quot;용인시&quot; placeholder=&quot;예: 용인시&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadAddrRoadName&quot;&gt;도로명:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadAddrRoadName&quot; value=&quot;신갈로84번길&quot; placeholder=&quot;예: 테헤란로&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadAddrBuildingNumber&quot;&gt;건물번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadAddrBuildingNumber&quot; value=&quot;16-9&quot; placeholder=&quot;예: 123&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadBuildingName&quot;&gt;건물명 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadBuildingName&quot; value=&quot;대광타운&quot; placeholder=&quot;예: 삼성타워&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadDong&quot;&gt;동 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadDong&quot; value=&quot;&quot; placeholder=&quot;예: A&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadHo&quot;&gt;호 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadHo&quot; value=&quot;202&quot; placeholder=&quot;예: 1001&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;button type=&quot;button&quot; onclick=&quot;testRoadAddressSearch()&quot;&gt;도로명주소검색 실행&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- 결과 표시 영역 --&gt;&#10;        &lt;div id=&quot;result&quot; class=&quot;result&quot; style=&quot;display: none;&quot;&gt;&#10;            &lt;h3&gt;API 응답 결과&lt;/h3&gt;&#10;            &lt;pre id=&quot;resultContent&quot;&gt;&lt;/pre&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        const API_BASE_URL = 'http://localhost:8080/api/real-estate';&#10;&#10;        function showTab(tabName) {&#10;            // 모든 탭과 컨텐츠 비활성화&#10;            document.querySelectorAll('.tab').forEach(tab =&gt; tab.classList.remove('active'));&#10;            document.querySelectorAll('.tab-content').forEach(content =&gt; content.classList.remove('active'));&#10;&#10;            // 선택된 탭과 컨텐츠 활성화&#10;            event.target.classList.add('active');&#10;            document.getElementById(tabName + '-tab').classList.add('active');&#10;        }&#10;&#10;        function showResult(data, isSuccess = true) {&#10;            const resultDiv = document.getElementById('result');&#10;            const resultContent = document.getElementById('resultContent');&#10;&#10;            resultDiv.style.display = 'block';&#10;            resultDiv.className = 'result ' + (isSuccess ? 'success' : 'error');&#10;            resultContent.textContent = JSON.stringify(data, null, 2);&#10;&#10;            // 결과로 스크롤&#10;            resultDiv.scrollIntoView({ behavior: 'smooth' });&#10;        }&#10;&#10;        async function makeRequest(url, data) {&#10;            try {&#10;                console.log('요청 URL:', url);&#10;                console.log('요청 데이터:', data);&#10;&#10;                const response = await fetch(url, {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json',&#10;                    },&#10;                    body: JSON.stringify(data)&#10;                });&#10;&#10;                console.log('응답 상태:', response.status);&#10;&#10;                const result = await response.json();&#10;                console.log('응답 데이터:', result);&#10;&#10;                if (response.ok &amp;&amp; result.success !== false) {&#10;                    showResult(result, true);&#10;                } else {&#10;                    showResult(result, false);&#10;                }&#10;&#10;                return result;&#10;            } catch (error) {&#10;                console.error('요청 오류:', error);&#10;                showResult({ error: '네트워크 오류', message: error.message }, false);&#10;            }&#10;        }&#10;&#10;        async function testSimpleSearch() {&#10;            const data = {&#10;                phoneNo: document.getElementById('simplePhoneNo').value,&#10;                password: document.getElementById('simplePassword').value,&#10;                address: document.getElementById('simpleAddress').value&#10;            };&#10;&#10;            await makeRequest(`${API_BASE_URL}/simple-search`, data);&#10;        }&#10;&#10;        async function testLotNumberSearch() {&#10;            const data = {&#10;                phoneNo: document.getElementById('lotPhoneNo').value,&#10;                password: document.getElementById('lotPassword').value,&#10;                addrSido: document.getElementById('lotAddrSido').value,&#10;                addrDong: document.getElementById('lotAddrDong').value,&#10;                addrLotNumber: document.getElementById('lotAddrLotNumber').value,&#10;                realtyType: document.getElementById('lotRealtyType').value,&#10;                buildingName: document.getElementById('lotBuildingName').value || null,&#10;                dong: document.getElementById('lotDong').value || null,&#10;                ho: document.getElementById('lotHo').value || null&#10;            };&#10;&#10;            await makeRequest(`${API_BASE_URL}/lot-number-search`, data);&#10;        }&#10;&#10;        async function testRoadAddressSearch() {&#10;            const data = {&#10;                phoneNo: document.getElementById('roadPhoneNo').value,&#10;                password: document.getElementById('roadPassword').value,&#10;                addrSido: document.getElementById('roadAddrSido').value,&#10;                addrSigungu: document.getElementById('roadAddrSigungu').value,&#10;                addrRoadName: document.getElementById('roadAddrRoadName').value,&#10;                addrBuildingNumber: document.getElementById('roadAddrBuildingNumber').value,&#10;                buildingName: document.getElementById('roadBuildingName').value || null,&#10;                dong: document.getElementById('roadDong').value || null,&#10;                ho: document.getElementById('roadHo').value || null&#10;            };&#10;&#10;            await makeRequest(`${API_BASE_URL}/road-address-search`, data);&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;ko&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;부동산 등기부등본 조회 API 테스트&lt;/title&gt;&#10;    &lt;style&gt;&#10;        body {&#10;            font-family: Arial, sans-serif;&#10;            max-width: 800px;&#10;            margin: 0 auto;&#10;            padding: 20px;&#10;            background-color: #f5f5f5;&#10;        }&#10;        .container {&#10;            background: white;&#10;            padding: 30px;&#10;            border-radius: 10px;&#10;            box-shadow: 0 2px 10px rgba(0,0,0,0.1);&#10;        }&#10;        .form-group {&#10;            margin-bottom: 15px;&#10;        }&#10;        label {&#10;            display: block;&#10;            margin-bottom: 5px;&#10;            font-weight: bold;&#10;            color: #333;&#10;        }&#10;        input, select, textarea {&#10;            width: 100%;&#10;            padding: 10px;&#10;            border: 1px solid #ddd;&#10;            border-radius: 5px;&#10;            font-size: 14px;&#10;        }&#10;        button {&#10;            background-color: #007bff;&#10;            color: white;&#10;            padding: 12px 24px;&#10;            border: none;&#10;            border-radius: 5px;&#10;            cursor: pointer;&#10;            font-size: 16px;&#10;            margin-right: 10px;&#10;        }&#10;        button:hover {&#10;            background-color: #0056b3;&#10;        }&#10;        .result {&#10;            margin-top: 20px;&#10;            padding: 15px;&#10;            background-color: #f8f9fa;&#10;            border-radius: 5px;&#10;            border: 1px solid #dee2e6;&#10;        }&#10;        .error {&#10;            background-color: #f8d7da;&#10;            border-color: #f5c6cb;&#10;            color: #721c24;&#10;        }&#10;        .success {&#10;            background-color: #d4edda;&#10;            border-color: #c3e6cb;&#10;            color: #155724;&#10;        }&#10;        .tab {&#10;            display: inline-block;&#10;            padding: 10px 20px;&#10;            margin-right: 5px;&#10;            background-color: #e9ecef;&#10;            border: 1px solid #dee2e6;&#10;            border-bottom: none;&#10;            cursor: pointer;&#10;            border-radius: 5px 5px 0 0;&#10;        }&#10;        .tab.active {&#10;            background-color: white;&#10;            border-bottom: 1px solid white;&#10;            margin-bottom: -1px;&#10;        }&#10;        .tab-content {&#10;            display: none;&#10;            border: 1px solid #dee2e6;&#10;            padding: 20px;&#10;            border-radius: 0 5px 5px 5px;&#10;        }&#10;        .tab-content.active {&#10;            display: block;&#10;        }&#10;    &lt;/style&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;h1&gt; 부동산 등기부등본 조회 API 테스트&lt;/h1&gt;&#10;&#10;        &lt;!-- 탭 메뉴 --&gt;&#10;        &lt;div class=&quot;tabs&quot;&gt;&#10;            &lt;div class=&quot;tab active&quot; onclick=&quot;showTab('simple')&quot;&gt;간편검색&lt;/div&gt;&#10;            &lt;div class=&quot;tab&quot; onclick=&quot;showTab('lot')&quot;&gt;지번검색&lt;/div&gt;&#10;            &lt;div class=&quot;tab&quot; onclick=&quot;showTab('road')&quot;&gt;도로명주소검색&lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- 간편검색 탭 --&gt;&#10;        &lt;div id=&quot;simple-tab&quot; class=&quot;tab-content active&quot;&gt;&#10;            &lt;h3&gt;간편검색&lt;/h3&gt;&#10;            &lt;form id=&quot;simpleForm&quot;&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;simplePhoneNo&quot;&gt;휴대폰 번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;simplePhoneNo&quot; value=&quot;01083662414&quot; placeholder=&quot;예: 01012345678&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;simplePassword&quot;&gt;비밀번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;password&quot; id=&quot;simplePassword&quot; value=&quot;0000&quot; placeholder=&quot;4자리 숫자&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;simpleAddress&quot;&gt;주소:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;simpleAddress&quot; value=&quot;경기도 용인시&quot; placeholder=&quot;예: 서울특별시 강남구&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;button type=&quot;button&quot; onclick=&quot;testSimpleSearch()&quot;&gt;간편검색 실행&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- 지번검색 탭 --&gt;&#10;        &lt;div id=&quot;lot-tab&quot; class=&quot;tab-content&quot;&gt;&#10;            &lt;h3&gt;지번검색&lt;/h3&gt;&#10;            &lt;form id=&quot;lotForm&quot;&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotPhoneNo&quot;&gt;휴대폰 번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotPhoneNo&quot; value=&quot;01083662414&quot; placeholder=&quot;예: 01012345678&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotPassword&quot;&gt;비밀번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;password&quot; id=&quot;lotPassword&quot; value=&quot;0000&quot; placeholder=&quot;4자리 숫자&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotAddrSido&quot;&gt;시/도:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotAddrSido&quot; value=&quot;경기도&quot; placeholder=&quot;예: 경기도&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotAddrDong&quot;&gt;읍면동:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotAddrDong&quot; value=&quot;지행동&quot; placeholder=&quot;예: 지행동&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotAddrLotNumber&quot;&gt;지번:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotAddrLotNumber&quot; value=&quot;691-3&quot; placeholder=&quot;예: 123-45&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotRealtyType&quot;&gt;부동산구분:&lt;/label&gt;&#10;                    &lt;select id=&quot;lotRealtyType&quot;&gt;&#10;                        &lt;option value=&quot;0&quot;&gt;토지+건물&lt;/option&gt;&#10;                        &lt;option value=&quot;1&quot; selected&gt;집합건물&lt;/option&gt;&#10;                        &lt;option value=&quot;2&quot;&gt;토지&lt;/option&gt;&#10;                        &lt;option value=&quot;3&quot;&gt;건물&lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotBuildingName&quot;&gt;건물명 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotBuildingName&quot; value=&quot;현진에버빌&quot; placeholder=&quot;예: 현진에버빌&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotDong&quot;&gt;동 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotDong&quot; value=&quot;104&quot; placeholder=&quot;예: 101&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;lotHo&quot;&gt;호 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;lotHo&quot; value=&quot;901&quot; placeholder=&quot;예: 1001&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;button type=&quot;button&quot; onclick=&quot;testLotNumberSearch()&quot;&gt;지번검색 실행&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- 도로명주소검색 탭 --&gt;&#10;        &lt;div id=&quot;road-tab&quot; class=&quot;tab-content&quot;&gt;&#10;            &lt;h3&gt;도로명주소검색&lt;/h3&gt;&#10;            &lt;form id=&quot;roadForm&quot;&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadPhoneNo&quot;&gt;휴대폰 번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadPhoneNo&quot; value=&quot;01083662414&quot; placeholder=&quot;예: 01012345678&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadPassword&quot;&gt;비밀번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;password&quot; id=&quot;roadPassword&quot; value=&quot;0000&quot; placeholder=&quot;4자리 숫자&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadAddrSido&quot;&gt;시/도:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadAddrSido&quot; value=&quot;경기도&quot; placeholder=&quot;예: 경기도&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadAddrSigungu&quot;&gt;시군구:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadAddrSigungu&quot; value=&quot;용인시&quot; placeholder=&quot;예: 용인시&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadAddrRoadName&quot;&gt;도로명:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadAddrRoadName&quot; value=&quot;신갈로84번길&quot; placeholder=&quot;예: 테헤란로&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadAddrBuildingNumber&quot;&gt;건물번호:&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadAddrBuildingNumber&quot; value=&quot;16-9&quot; placeholder=&quot;예: 123&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadBuildingName&quot;&gt;건물명 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadBuildingName&quot; value=&quot;대광타운&quot; placeholder=&quot;예: 삼성타워&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadDong&quot;&gt;동 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadDong&quot; value=&quot;&quot; placeholder=&quot;예: A&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;form-group&quot;&gt;&#10;                    &lt;label for=&quot;roadHo&quot;&gt;호 (선택사항):&lt;/label&gt;&#10;                    &lt;input type=&quot;text&quot; id=&quot;roadHo&quot; value=&quot;202&quot; placeholder=&quot;예: 1001&quot;&gt;&#10;                &lt;/div&gt;&#10;                &lt;button type=&quot;button&quot; onclick=&quot;testRoadAddressSearch()&quot;&gt;도로명주소검색 실행&lt;/button&gt;&#10;            &lt;/form&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;!-- 결과 표시 영역 --&gt;&#10;        &lt;div id=&quot;result&quot; class=&quot;result&quot; style=&quot;display: none;&quot;&gt;&#10;            &lt;h3&gt;API 응답 결과&lt;/h3&gt;&#10;            &lt;pre id=&quot;resultContent&quot;&gt;&lt;/pre&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&#10;    &lt;script&gt;&#10;        const API_BASE_URL = 'http://localhost:8081/api/real-estate';&#10;&#10;        function showTab(tabName) {&#10;            // 모든 탭과 컨텐츠 비활성화&#10;            document.querySelectorAll('.tab').forEach(tab =&gt; tab.classList.remove('active'));&#10;            document.querySelectorAll('.tab-content').forEach(content =&gt; content.classList.remove('active'));&#10;&#10;            // 선택된 탭과 컨텐츠 활성화&#10;            event.target.classList.add('active');&#10;            document.getElementById(tabName + '-tab').classList.add('active');&#10;        }&#10;&#10;        function showResult(data, isSuccess = true) {&#10;            const resultDiv = document.getElementById('result');&#10;            const resultContent = document.getElementById('resultContent');&#10;&#10;            resultDiv.style.display = 'block';&#10;            resultDiv.className = 'result ' + (isSuccess ? 'success' : 'error');&#10;            resultContent.textContent = JSON.stringify(data, null, 2);&#10;&#10;            // 결과로 스크롤&#10;            resultDiv.scrollIntoView({ behavior: 'smooth' });&#10;        }&#10;&#10;        async function makeRequest(url, data) {&#10;            try {&#10;                console.log('요청 URL:', url);&#10;                console.log('요청 데이터:', data);&#10;&#10;                const response = await fetch(url, {&#10;                    method: 'POST',&#10;                    headers: {&#10;                        'Content-Type': 'application/json',&#10;                    },&#10;                    body: JSON.stringify(data)&#10;                });&#10;&#10;                console.log('응답 상태:', response.status);&#10;&#10;                const result = await response.json();&#10;                console.log('응답 데이터:', result);&#10;&#10;                if (response.ok &amp;&amp; result.success !== false) {&#10;                    showResult(result, true);&#10;                } else {&#10;                    showResult(result, false);&#10;                }&#10;&#10;                return result;&#10;            } catch (error) {&#10;                console.error('요청 오류:', error);&#10;                showResult({ error: '네트워크 오류', message: error.message }, false);&#10;            }&#10;        }&#10;&#10;        async function testSimpleSearch() {&#10;            const data = {&#10;                phoneNo: document.getElementById('simplePhoneNo').value,&#10;                password: document.getElementById('simplePassword').value,&#10;                address: document.getElementById('simpleAddress').value&#10;            };&#10;&#10;            await makeRequest(`${API_BASE_URL}/simple-search`, data);&#10;        }&#10;&#10;        async function testLotNumberSearch() {&#10;            const data = {&#10;                phoneNo: document.getElementById('lotPhoneNo').value,&#10;                password: document.getElementById('lotPassword').value,&#10;                addrSido: document.getElementById('lotAddrSido').value,&#10;                addrDong: document.getElementById('lotAddrDong').value,&#10;                addrLotNumber: document.getElementById('lotAddrLotNumber').value,&#10;                realtyType: document.getElementById('lotRealtyType').value,&#10;                buildingName: document.getElementById('lotBuildingName').value || null,&#10;                dong: document.getElementById('lotDong').value || null,&#10;                ho: document.getElementById('lotHo').value || null&#10;            };&#10;&#10;            await makeRequest(`${API_BASE_URL}/lot-number-search`, data);&#10;        }&#10;&#10;        async function testRoadAddressSearch() {&#10;            const data = {&#10;                phoneNo: document.getElementById('roadPhoneNo').value,&#10;                password: document.getElementById('roadPassword').value,&#10;                addrSido: document.getElementById('roadAddrSido').value,&#10;                addrSigungu: document.getElementById('roadAddrSigungu').value,&#10;                addrRoadName: document.getElementById('roadAddrRoadName').value,&#10;                addrBuildingNumber: document.getElementById('roadAddrBuildingNumber').value,&#10;                buildingName: document.getElementById('roadBuildingName').value || null,&#10;                dong: document.getElementById('roadDong').value || null,&#10;                ho: document.getElementById('roadHo').value || null&#10;            };&#10;&#10;            await makeRequest(`${API_BASE_URL}/road-address-search`, data);&#10;        }&#10;    &lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>